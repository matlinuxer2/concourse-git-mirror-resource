#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

payload="$(cat <&0)"

load_pubkey "$payload"

# This repository directory will be cached. Usually there are two events to reset:
#   1. The resource type image is updated.
#   2. User triggers the ``clear-resource-cache`` instruction
prepare_git_dir "$GIT_REPOS_DIR" || exit 1
(
	set +e
	cd "$GIT_REPOS_DIR" || exit 1

	# Evacuate
	checkout_empty
	wipe_remotes
	wipe_branches

	# Processing pull configurations
	PULL_ERR=""
	(jq -c '(.source.pull//[])[]' <<<"$payload") |
		while read -r pull_cfg; do
			pull_uri=$(jq -r '.uri' <<<"$pull_cfg")
			pull_repo=$(hash_url "$pull_uri")
			set_remote $pull_repo "$pull_uri"
			git fetch --prune $pull_repo || {
				PULL_ERR="$pull_repo $PULL_ERR"
			}

			tmpf=$(mktemp)
			tmpf_aftr=$(mktemp)
			(
				# To process include filter
				jq -r '(.include//[])[]' <<<"$pull_cfg" |
					while read -r pattern; do
						echo "include filter: $pattern"
						remote_br $pull_repo | grep -e "$pattern" >>$tmpf
						cat $tmpf | sort -u | perl_sponge $tmpf
					done

				# To process exclude filter
				jq -r '(.exclude//[])[]' <<<"$pull_cfg" |
					while read -r pattern; do
						echo "exclude filter: $pattern"
						cat $tmpf | grep -v -e "$pattern" | perl_sponge $tmpf
					done

				# Show filtered result
				cat $tmpf

				# To process rename
				rename_method=$(jq -r '.rename.method' <<<"$pull_cfg")

				case "$rename_method" in
				copy)
					cat $tmpf | while read -r input_line; do
						echo "${input_line} ${input_line}" >>$tmpf_aftr
					done
					;;

				prefix)
					arg_name=$(jq -r '.rename.arg//""' <<<"$pull_cfg")
					cat $tmpf | while read -r input_line; do
						echo "${arg_name}${input_line} ${input_line}" >>$tmpf_aftr
					done
					;;

				postfix)
					arg_name=$(jq -r '.rename.arg//""' <<<"$pull_cfg")
					cat $tmpf | while read -r input_line; do
						echo "${input_line}${arg_name} ${input_line}" >>$tmpf_aftr
					done
					;;

				*)
					cat $tmpf | while read -r input_line; do
						echo "${input_line} ${input_line}" >>$tmpf_aftr
					done
					;;
				esac

				# Show converted branches
				cat $tmpf_aftr

				# To handle each branch
				cat $tmpf_aftr | while read -r input_pairs; do
					input_br=$(echo $input_pairs | awk '{print $1}')
					orig_br=$(echo $input_pairs | awk '{print $2}')

					if [ $(local_br | grep -e "^${input_br}$" | wc -c) -ne 0 ]; then
						collision=$(jq -r '.collision' <<<"$pull_cfg")

						[ "$collision" = "skip" ] && continue

						[ "$collision" = "overwrite" ] && {
							git branch -f ${input_br} remotes/$pull_repo/$orig_br
							continue
						}
					else
						git branch ${input_br} remotes/$pull_repo/$orig_br
					fi
				done
			)
			rm $tmpf_aftr
			rm $tmpf
		done

	# We need to abort here. Because partially mirrored branches will generate incomplete
	#  mappings which cause false remote branches pushing and deletions.
	if [ -n "$PULL_ERR" ]; then
		echo "[ERR] Pulling processing has error: $PULL_ERR"
		exit 1
	fi

	status_hash=$(local_br | md5sum | awk '{print $1}')

	# Processing push configurations
	(jq -c '(.source.push//[])[]' <<<"$payload") |
		while read -r push_cfg; do
			push_uri=$(jq -r '.uri' <<<"$push_cfg")
			push_repo=$(hash_url "$push_uri")
			remote_push_force=$(jq -r '.force//"false"' <<<"$push_cfg")
			remote_push_prune=$(jq -r '.prune//"none"' <<<"$push_cfg")

			wipe_remotes
			set_remote $push_repo "$push_uri"
			git fetch --prune $push_repo || {
				"[ERR] Pulling repos: $push_repo failed. Skip to next one..."
				wipe_remotes
				continue
			}

			echo "Processing push..."
			(
				local_br
				remote_br $push_repo
			) | sort -u | while read -r br; do
				(local_br | grep -e "^$br$" >&/dev/null) && l_side="y" || l_side="n"
				(remote_br $push_repo | grep -e "^$br$" >&/dev/null) && r_side="y" || r_side="n"

				# case 1/3: local exist , remote none, add
				[ "$l_side" = "y" -a "$r_side" = "n" ] && {
					git push $push_repo ${br}:${br} && {
						record_pushed_br "$push_repo" "$br"
					}
				}

				# case 2/3: local exist , remote exist, sync
				[ "$l_side" = "y" -a "$r_side" = "y" ] && {
					if [ "$remote_push_force" = "true" ]; then
						git push -f $push_repo ${br}:${br} && {
							record_pushed_br "$push_repo" "$br"
						}
					else
						git push $push_repo ${br}:${br} && {
							record_pushed_br "$push_repo" "$br"
						}
					fi
				}

				# case 3/3: local none, remote exist, delete
				[ "$l_side" = "n" -a "$r_side" = "y" ] && {
					case "$remote_push_prune" in
					all)
						git push $push_repo :${br}
						;;

					deleted)
						is_deleted_previously "$push_repo" "$br" && {
							git push $push_repo :${br}
						}
						;;

					none)
						: # Don't delete any remote branches
						;;

					*)
						: # Don't delete any remote branches
						;;
					esac
				}
			done
		done

	wipe_remotes

	# Change records anchor from curr to prev
	rotate_record

	echo $status_hash | jq -R '.' | jq -s "map({ref: .})" >&3
)
